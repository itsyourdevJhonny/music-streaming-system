package com.musicstreaming.application.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a playlist entity in the music streaming application.
 * A playlist consists of a list of songs and is owned by a specific user.
 *
 * This entity is linked to PlaylistSong to manage songs in a specific order,
 * and to User to indicate ownership.
 *
 * Lombok annotations (@Getter and @Setter) are used to auto-generate
 * boilerplate code for getters and setters.
 */
@Entity
@Getter
@Setter
public class Playlist {

    /**
     * The unique identifier for the playlist.
     * This value is automatically generated by the database using the IDENTITY strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the playlist, given by the user.
     */
    private String name;

    /**
     * The list of songs in the playlist.
     *
     * This relationship is one-to-many with PlaylistSong, meaning a playlist
     * can contain multiple PlaylistSong entries. The PlaylistSong entity contains
     * the actual song reference and metadata like track order.
     *
     * - mappedBy = "playlist": indicates that PlaylistSong owns the relationship.
     * - cascade = CascadeType.ALL: all operations (persist, merge, remove, etc.) will cascade to PlaylistSong.
     * - orphanRemoval = true: if a PlaylistSong is removed from the list, it will also be removed from the database.
     * - @OrderBy("trackOrder ASC"): ensures the songs are ordered by their `trackOrder` field.
     */
    @OneToMany(mappedBy = "playlist", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("trackOrder ASC")
    private List<PlaylistSong> songs = new ArrayList<>();

    /**
     * The user who owns the playlist.
     *
     * This is a many-to-one relationship since a user can own multiple playlists,
     * but each playlist belongs to one user.
     *
     * - @JoinColumn(name = "user_id"): specifies the foreign key column in the playlist table.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;
}
